// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-01-18, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/substrate
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn call_with_code_kb(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(s: u32, ) -> Weight;
	fn call() -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn remove_code() -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight;
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_contains_storage(r: u32, ) -> Weight;
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight;
	fn seal_take_storage(r: u32, ) -> Weight;
	fn seal_take_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn seal_ecdsa_recover(r: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize() -> Weight {
		(2_614_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(14_025_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((835_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(35_217_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((143_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	fn reinstrument(c: u32, ) -> Weight {
		(27_311_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((69_724_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call_with_code_kb(c: u32, ) -> Weight {
		(228_423_000 as Weight)
			// Standard Error: 55_000
			.saturating_add((68_201_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(267_817_000 as Weight)
			// Standard Error: 118_000
			.saturating_add((165_466_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 7_000
			.saturating_add((1_820_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn instantiate(s: u32, ) -> Weight {
		(184_419_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_770_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call() -> Weight {
		(138_358_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	fn upload_code(c: u32, ) -> Weight {
		(66_638_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((70_825_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		(33_447_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_caller(r: u32, ) -> Weight {
		(237_730_000 as Weight)
			// Standard Error: 150_000
			.saturating_add((77_035_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_address(r: u32, ) -> Weight {
		(234_935_000 as Weight)
			// Standard Error: 149_000
			.saturating_add((78_318_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas_left(r: u32, ) -> Weight {
		(236_022_000 as Weight)
			// Standard Error: 166_000
			.saturating_add((77_340_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_balance(r: u32, ) -> Weight {
		(239_923_000 as Weight)
			// Standard Error: 210_000
			.saturating_add((218_810_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_value_transferred(r: u32, ) -> Weight {
		(249_590_000 as Weight)
			// Standard Error: 155_000
			.saturating_add((76_159_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(252_758_000 as Weight)
			// Standard Error: 154_000
			.saturating_add((75_078_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_block_number(r: u32, ) -> Weight {
		(248_832_000 as Weight)
			// Standard Error: 121_000
			.saturating_add((75_295_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_now(r: u32, ) -> Weight {
		(241_873_000 as Weight)
			// Standard Error: 126_000
			.saturating_add((75_842_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(251_845_000 as Weight)
			// Standard Error: 202_000
			.saturating_add((183_369_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas(r: u32, ) -> Weight {
		(111_367_000 as Weight)
			// Standard Error: 72_000
			.saturating_add((36_626_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input(r: u32, ) -> Weight {
		(238_471_000 as Weight)
			// Standard Error: 136_000
			.saturating_add((70_635_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(325_601_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((11_933_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return(r: u32, ) -> Weight {
		(237_360_000 as Weight)
			// Standard Error: 75_000
			.saturating_add((1_257_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(225_160_000 as Weight)
			// Standard Error: 0
			.saturating_add((238_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn seal_terminate(r: u32, ) -> Weight {
		(228_394_000 as Weight)
			// Standard Error: 176_000
			.saturating_add((84_333_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	fn seal_random(r: u32, ) -> Weight {
		(232_137_000 as Weight)
			// Standard Error: 337_000
			.saturating_add((251_979_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_deposit_event(r: u32, ) -> Weight {
		(225_312_000 as Weight)
			// Standard Error: 383_000
			.saturating_add((415_282_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:100 w:100)
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(732_390_000 as Weight)
			// Standard Error: 2_131_000
			.saturating_add((393_155_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 420_000
			.saturating_add((87_544_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_debug_message(r: u32, ) -> Weight {
		(131_112_000 as Weight)
			// Standard Error: 118_000
			.saturating_add((54_039_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage(r: u32, ) -> Weight {
		(227_158_000 as Weight)
			// Standard Error: 487_000
			.saturating_add((314_391_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		(466_881_000 as Weight)
			// Standard Error: 209_000
			.saturating_add((33_316_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		(447_488_000 as Weight)
			// Standard Error: 104_000
			.saturating_add((689_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_073_000
			.saturating_add((849_656_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		(413_618_000 as Weight)
			// Standard Error: 72_000
			.saturating_add((22_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage(r: u32, ) -> Weight {
		(111_513_000 as Weight)
			// Standard Error: 713_000
			.saturating_add((442_186_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(432_183_000 as Weight)
			// Standard Error: 189_000
			.saturating_add((61_454_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_contains_storage(r: u32, ) -> Weight {
		(16_103_000 as Weight)
			// Standard Error: 1_158_000
			.saturating_add((562_526_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		(426_065_000 as Weight)
			// Standard Error: 165_000
			.saturating_add((6_938_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_take_storage(r: u32, ) -> Weight {
		(73_577_000 as Weight)
			// Standard Error: 1_136_000
			.saturating_add((547_500_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0xdb4faa73ca6d2016e53c7156087c176b79b169c409b8a0063a07964f3187f9e9] (r:1 w:1)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)
	// Storage: unknown [0x300b870593d648c3f68bddefcb7e0e0996410b59ea34ad6536dabea30d3302d9] (r:1 w:1)
	// Storage: unknown [0x34448aa771744a9d8df59ce01f269ce76c1bf5538d32af59b3e4a40f914f10c3] (r:1 w:1)
	// Storage: unknown [0xbdbb7ed7ab7733c9126f47eca871d86fe0729c2c513fbaf494bfaf14f65ab4c5] (r:1 w:1)
	// Storage: unknown [0x49bbb0d7100a9e7953816e330b16f326e0e22d4f5db1f5212f80b64ee672687e] (r:1 w:1)
	// Storage: unknown [0x0e6ac5fd7ebc7ab3002431fc03ba1362a7f25af45ea5f521d6f2a10ea8d778a9] (r:1 w:1)
	// Storage: unknown [0x7665ef7bd55845ebd0573e9bb47b2798623f7dd0845ebfa4b301f9a9aa22a133] (r:1 w:1)
	// Storage: unknown [0x688efe13bfa56404151aa99227768a2089e83d63ce500b50e6fdd239bbdf4381] (r:1 w:1)
	// Storage: unknown [0x5f01fc25f7fcec2685b90b02981f055ba04d24e913ae415de21ec9e1e9ac807c] (r:1 w:1)
	// Storage: unknown [0x2e1d76267c7b11ad808e33698525af406150e8ecadcc2bd2ce520ce0af356237] (r:1 w:1)
	// Storage: unknown [0x7ac4b8663df15e82c2ffc187b8dd8f19b10789e7fe80be09f4bb20d6bb3284ad] (r:1 w:1)
	// Storage: unknown [0x924a03d10da36bfa1fff32c7b722da5e962a621d3c4605293288071d662537bd] (r:1 w:1)
	// Storage: unknown [0x2674aadc494a78bc50bd8c05b5234e619b736fcc6c3a262e2cbff75b8a2d40c7] (r:1 w:1)
	// Storage: unknown [0x324e32d43110f4cd6ea6b8eddfb7e94bf7dc4f2761153648680882b0695cc76e] (r:1 w:1)
	// Storage: unknown [0x00f57f5a712bbe33758149c0061587c7b43f1f7af9a1671c5e9887d62370e6ed] (r:1 w:1)
	// Storage: unknown [0x5f7c5c6b289f2a84089848cbc41922f2a49064d923a28ff3468805fec2715d2b] (r:1 w:1)
	// Storage: unknown [0x081fce6f0551c71176ba010a96848182164c4396f957d195832b4bf53550424b] (r:1 w:1)
	// Storage: unknown [0x04a896f5f254f7ccdc0d072d0e98543a360126b313c97fbfbd4be1bc7175b2d1] (r:1 w:1)
	// Storage: unknown [0x96e64e5a9efd54ffe2b4a7360d89fe68f79ede431caf9dd3fda93a7382f69411] (r:1 w:1)
	// Storage: unknown [0x9683ec6119f1d4426cd96c198dc09ac25db6280a650113359712b399f1c68c72] (r:1 w:1)
	// Storage: unknown [0xf2f272ae2de3768aa6bc0623bbeff07036a7f451bf6bfd3c09e7bcf635b3c605] (r:1 w:1)
	// Storage: unknown [0x6e08484d41fcfac1cadbd34e12bb6b6744a3b320e3f68995e4c96026c31979c3] (r:1 w:1)
	// Storage: unknown [0x8544458fbf0d98d4d978e1bba1f36940964456e8c68771c59f2368594336232c] (r:1 w:1)
	// Storage: unknown [0x53fcec34f1ec161d869efac88788e03ccd6caf9f5eb6e8d200c294d2f45e8a82] (r:1 w:1)
	// Storage: unknown [0x1ae3e86f988bca6d002498ebd21eedd221c7eced24f229e66b2fb032d0f5f60c] (r:1 w:1)
	// Storage: unknown [0x6bbaf5ad2d53b47aff17524831e6a06f71bf50bed3991b28dc131427a5dfa318] (r:1 w:1)
	// Storage: unknown [0x2f2df4eba27b6d633b7d687619dddfe120fcc2e0edf2c5f061580b69ae4a1f7c] (r:1 w:1)
	// Storage: unknown [0x8de3bbe89ccb994a1148675d0696adc7cc95edd8207a3bd74427848049492306] (r:1 w:1)
	// Storage: unknown [0x52c6d7684a22c2113af5ff8079715638d90e2d820b53fe1e2ea7e0615e412fd9] (r:1 w:1)
	// Storage: unknown [0xe00e2c42185ba6bc4069903bb0129ac2554dfb5ee7976a5c8465d7a408df68c7] (r:1 w:1)
	// Storage: unknown [0x3786bcae52db85f5d919de85702143e1beac605e3827e28fedb8c438ae9ef088] (r:1 w:1)
	// Storage: unknown [0x31361b97078906a9824198f57859f189e3a0a8eeb07aa8f5ef89483c96ef78bf] (r:1 w:1)
	// Storage: unknown [0x29ea6b215529a53b2fd9da0a185f6ea69798261d313e8a22ac41bf2814c9a9c1] (r:1 w:1)
	// Storage: unknown [0x94e4350fc396fda2da7c61f8d966f76d4901127be5dc92125b30885d6a5a0080] (r:1 w:1)
	// Storage: unknown [0x5200d0f2826db09c18bca7a1ae79f98305a0186489297a8151f93dfd9662f1c5] (r:1 w:1)
	// Storage: unknown [0xf56858066f6f879773decc1528f0cf683ba73e170798b66c84c4fd4ae4d6179a] (r:1 w:1)
	// Storage: unknown [0x8ac914147b43b52991108548a0ccf5be82293673a042de993c4f400f614a6681] (r:1 w:1)
	// Storage: unknown [0x29bc93f266a0d127f69f362b318cddf429ed5bc193910260a16abf8cc4588d19] (r:1 w:1)
	// Storage: unknown [0xb00fa5da7e79bd4db11fbaf1ecc3232564547561bbc0039e033ac0279313b5ee] (r:1 w:1)
	// Storage: unknown [0xf03af9507c19327fa33f6a7d6e1cf311aee61ee6eb8ef879b0962f84ef70b988] (r:1 w:1)
	// Storage: unknown [0x429af6a4740fd1dc2d70d9e9ca76451ef8d0dcb7adb1a9f4304889cd6abaa059] (r:1 w:1)
	// Storage: unknown [0x485044932a0ab1cb972557636f7958dfdd48634d0ba4407daf550a3a6193a3bd] (r:1 w:1)
	// Storage: unknown [0x9095c47b46220a241e177d24634b82d4bb29a04c84077ec7a6ff0585970d1646] (r:1 w:1)
	// Storage: unknown [0xf2e894f97b143d4b73924801bb0cee1a0c9d88220c8532d11707e6ab47d56ca1] (r:1 w:1)
	// Storage: unknown [0xac531dd0d6263955e7758687e577b529bbdb3928036db7f1d807a968e0bdb890] (r:1 w:1)
	// Storage: unknown [0xd007ecf3b50633e7006677b7d257d73233a18e183a508d76f08f7d0d339f5c20] (r:1 w:1)
	// Storage: unknown [0xb57e716d281abae69c9f0c842275efa6426ba580cc16e96cf070c0aed43ee7af] (r:1 w:1)
	// Storage: unknown [0x18bb56716e8f98b2408a8ec671c98db0719f9d6a4e9e3bd8d98c3b518eb56f2c] (r:1 w:1)
	// Storage: unknown [0x7c850c70ab15094d612baa07e52f234529e4bbe4c95f89b79e2cd97c61a57766] (r:1 w:1)
	// Storage: unknown [0xbf9d7213d2803a85215f199b461cdf563b03e695d14e79ec8c21d33cf8e0a1c9] (r:1 w:1)
	// Storage: unknown [0xb9d9742d6f604c2f3c12d59952b9a32760128a7d57538bd67d20dbf97000619f] (r:1 w:1)
	// Storage: unknown [0x813277348f73e1562929096c455ffa22b1f288cc819efcc233a71e9d78e7df23] (r:1 w:1)
	// Storage: unknown [0x41cb52f4c7489e8ba45f2adeb6abe24764cf08fb88f20555c39a8cc763d12901] (r:1 w:1)
	// Storage: unknown [0xcf748b921c6fd68e51c4aad2d0a6617e9682f6240db50ce42e83d83c3fbece2f] (r:1 w:1)
	// Storage: unknown [0x2d39817994b5ba2676388720e3eee9f4fc757d6c48be70d14de675f9b4a64a2e] (r:1 w:1)
	// Storage: unknown [0x88664c0f264861d397901f5b0709c2b1de847826c904cec127d01aa91bcd4ad6] (r:1 w:1)
	// Storage: unknown [0xa26645c0f39f84e060af5a73b2c2ecde8867e2d7296fab26805f0a1cc576cf24] (r:1 w:1)
	// Storage: unknown [0x308de36c7f1a52bc34ba2b96ec610128dd42bc9ac581eae7ed4383e45a83f609] (r:1 w:1)
	// Storage: unknown [0xfef4a110eee4a5401a0882608a7cfc22a7b1f542b4e3a74e6ac560b0c3879794] (r:1 w:1)
	// Storage: unknown [0xe9308ad1923d86ee67dd89db7b2c24f396ab294ef1316e9e6d5eaccd93733a1d] (r:1 w:1)
	// Storage: unknown [0xff44c7f082283584d410beffe249fefb4d7419cc58211dd734f7f72ebb2a618f] (r:1 w:1)
	// Storage: unknown [0x12299425a4b4ea5136a7267d232e1cc103543854ba2934b303b00fd8ebe501f3] (r:1 w:1)
	// Storage: unknown [0x82904240c70fd08c8d6e53627856e16dfeb8c9729a2238d173b31a56cb7086de] (r:1 w:1)
	// Storage: unknown [0x84fa080c541d588e755817ea338d09597dd0446da3aa78dfb7fc5186a7228018] (r:1 w:1)
	// Storage: unknown [0x8d83f96118f58219ee3a688f4199427ef28c1a6d0c6052e4f950a8953e201261] (r:1 w:1)
	// Storage: unknown [0xa33fe57cd06a89a60c717930bc503cf0f38b60804c52e5f30feedd2164a50688] (r:1 w:1)
	// Storage: unknown [0x4b63aa3c30973d237c4e3c71f90315e746b4b08935f518e55028ee586941064f] (r:1 w:1)
	// Storage: unknown [0xf72fbf6fcd0fd4a64ee867024bdce627360cd2194d77ff3b18f63434a06facc8] (r:1 w:1)
	// Storage: unknown [0x159a2152e521a0c7cfec07b80b287fe544775dbccb9703afce49fd3f058d423d] (r:1 w:1)
	// Storage: unknown [0xa1865f445d388131ed5ef96a1ab9188dc58c97a6c215a2f1d76ddff56ac72b3a] (r:1 w:1)
	// Storage: unknown [0x054a96d79d52dd3a148e4a42eda6c6b70a1c6166e2706bd11326b6faa2ab9281] (r:1 w:1)
	// Storage: unknown [0x3872c92d6665a29070e8418fcb1637610eb0fc11f4908d15735fe3865a10d6ed] (r:1 w:1)
	// Storage: unknown [0xbbf38866c42299a48266f9db33e99f49847cfd547277215c50e9994929614e0f] (r:1 w:1)
	// Storage: unknown [0x36b08faf5b20e9a80a201f0a07a420ff5c8d6f4ec8d294660a51e10b5d8ba958] (r:1 w:1)
	// Storage: unknown [0xa7c6cfe79b12567c176427c41db777435d657542701748104eccaed56d3ae273] (r:1 w:1)
	// Storage: unknown [0xc5d6e327873df268604d901d3cb4a603d00f7223002fa00662e55a358e84153b] (r:1 w:1)
	// Storage: unknown [0xbae6d6b8797c0faa90b462c506e90f4231f224f326736aae9449a013f2a2e64e] (r:1 w:1)
	// Storage: unknown [0x997bc71109b7a400ed9320c60a4b60b3409e7dd6971cc30dd67b0958aef91d6f] (r:1 w:1)
	// Storage: unknown [0x7db97ca38047dcb187fc0c08fb983109661baab8553dd2ac829b61e9db40bc2f] (r:1 w:1)
	// Storage: unknown [0xb9c51e2da72b6527b3ab704295e3bae31060ecc1e043594f8453d8b2ab5769e7] (r:1 w:1)
	// Storage: unknown [0x9deae3e294bdd6fdb746d5871b6ad5d7aef644b67b2af3323073e39218282e28] (r:1 w:1)
	// Storage: unknown [0x704bb8f08427ee9b0103c3816c07e75819700353157d2a537eeab53470389ca0] (r:1 w:1)
	// Storage: unknown [0xac6b94570bb5f162408bff16ec42f2040718c1092d0bc7ee2b1919f03bdb5075] (r:1 w:1)
	// Storage: unknown [0x2d681d55cfea87bec95fdde692d9d928d83493ec3f7f794988bd9ebdc95835c5] (r:1 w:1)
	// Storage: unknown [0x2016f6f5ad9d98dfc8826483f3c04a371ed2c6a9117880843b97431eb000f141] (r:1 w:1)
	// Storage: unknown [0xbae2a2155b8708687c4a563c8c039398f1d356ab438c2a19551e330d7d19b33e] (r:1 w:1)
	// Storage: unknown [0xd688ca0f4263c94fd4999e79e0ef7d5b8db856d957d8c1b34474bb86813afb54] (r:1 w:1)
	// Storage: unknown [0x6c26cb69e5ad5dac616294826732c63ad7af69b5ebf4eccaef9d2d4edd3925f5] (r:1 w:1)
	// Storage: unknown [0xf81dc1d5c78deaf76b072b3f3253e33987fc72fea10a6fe26b03ec7d1e3d57b0] (r:1 w:1)
	// Storage: unknown [0x676d35e85e780d847762725e22253f247075d1c1d558a4decf56c0491f3d7fed] (r:1 w:1)
	// Storage: unknown [0xc86c744d2335cc09d2b319eca17759669b13c17c704e570f105b64dc2b74f359] (r:1 w:1)
	// Storage: unknown [0xb8342c8a0491f1e43510eb3abb2bee181f4495d8d0213db953ab66217d3df0b4] (r:1 w:1)
	// Storage: unknown [0xae7b6a5865924be3eeee3ac56cd21ebf7f322acc326219cfff5fd8728a1d1b3f] (r:1 w:1)
	// Storage: unknown [0x163f75e1de3ec50a2cc5b855c35328869b0836ddb527cd8948e4f22cc57d09af] (r:1 w:1)
	// Storage: unknown [0x1d4229d967b961f1537d609d7ab8cd5c0dd70ad2265e4d8b87bdec67000952e1] (r:1 w:1)
	// Storage: unknown [0x10bd74f440ad26ac63db3f3dd950e1e9448ebb46beabcf83d1716e0d043fcbd5] (r:1 w:1)
	// Storage: unknown [0x1d6c81f919d34b8353086d4984268e69d6a83a89e688da4f5c03c215bfd7ab84] (r:1 w:1)
	// Storage: unknown [0x45671844ebdf874a5dc019323699096192d0874cbf10981cae2f92be488dcd49] (r:1 w:1)
	// Storage: unknown [0xeee1a1f7d4776f405be2c8f022fd9c9cd0bc43e8a5da1070dac55304bdded602] (r:1 w:1)
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		(814_160_000 as Weight)
			// Standard Error: 445_000
			.saturating_add((70_253_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(105 as Weight))
			.saturating_add(T::DbWeight::get().writes(103 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_transfer(r: u32, ) -> Weight {
		(70_945_000 as Weight)
			// Standard Error: 1_408_000
			.saturating_add((2_526_884_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call(r: u32, ) -> Weight {
		(2_561_395_000 as Weight)
			// Standard Error: 19_784_000
			.saturating_add((20_645_690_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight {
		(22_589_583_000 as Weight)
			// Standard Error: 31_647_000
			.saturating_add((2_447_607_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 11_000
			.saturating_add((23_305_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 12_000
			.saturating_add((34_843_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(105 as Weight))
			.saturating_add(T::DbWeight::get().reads((101 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(101 as Weight))
			.saturating_add(T::DbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:100 w:100)
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 52_511_000
			.saturating_add((32_163_951_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((400 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((400 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:102 w:102)
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight {
		(27_744_656_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((23_653_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 31_000
			.saturating_add((36_054_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 31_000
			.saturating_add((160_592_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(208 as Weight))
			.saturating_add(T::DbWeight::get().writes(206 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(234_903_000 as Weight)
			// Standard Error: 170_000
			.saturating_add((99_706_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(359_822_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((458_584_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(231_873_000 as Weight)
			// Standard Error: 166_000
			.saturating_add((114_790_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(299_790_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((324_193_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(234_737_000 as Weight)
			// Standard Error: 136_000
			.saturating_add((83_887_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(413_284_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((124_110_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(231_453_000 as Weight)
			// Standard Error: 147_000
			.saturating_add((83_192_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(400_659_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((124_126_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		(234_717_000 as Weight)
			// Standard Error: 1_185_000
			.saturating_add((15_527_339_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(46_946_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((804_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(54_009_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((2_496_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(53_895_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((2_519_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(37_959_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_968_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(36_319_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((3_139_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(39_823_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((1_933_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(38_961_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_510_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(45_078_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((2_421_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(48_015_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((24_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(48_177_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((19_853_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(49_688_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((29_931_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(85_995_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_117_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(39_628_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_345_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(39_447_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_376_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(42_116_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((1_884_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(45_146_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((1_949_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(50_863_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_754_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(47_256_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((808_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(50_218_000 as Weight)
			// Standard Error: 1_449_000
			.saturating_add((226_188_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(44_134_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_491_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(43_855_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_499_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(44_015_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_492_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(44_007_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_495_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(41_289_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((1_924_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(41_509_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((1_921_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(44_016_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_492_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(37_241_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_478_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(37_064_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_484_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(37_298_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_479_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(37_072_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_481_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(36_955_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_484_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(37_087_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_479_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(36_859_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((2_507_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(37_102_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_476_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(37_175_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_476_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(37_219_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_475_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(37_141_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_479_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(37_098_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_476_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(36_930_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_492_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(36_699_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((3_154_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(36_957_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_809_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(36_843_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((3_132_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(36_683_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_853_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(36_994_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_497_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(36_998_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_488_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(36_901_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_493_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(37_263_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_476_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(37_149_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_480_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(37_019_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_493_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(37_006_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_488_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(36_929_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_496_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize() -> Weight {
		(2_614_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(14_025_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((835_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(35_217_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((143_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	fn reinstrument(c: u32, ) -> Weight {
		(27_311_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((69_724_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call_with_code_kb(c: u32, ) -> Weight {
		(228_423_000 as Weight)
			// Standard Error: 55_000
			.saturating_add((68_201_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(267_817_000 as Weight)
			// Standard Error: 118_000
			.saturating_add((165_466_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 7_000
			.saturating_add((1_820_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn instantiate(s: u32, ) -> Weight {
		(184_419_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_770_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call() -> Weight {
		(138_358_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	fn upload_code(c: u32, ) -> Weight {
		(66_638_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((70_825_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		(33_447_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_caller(r: u32, ) -> Weight {
		(237_730_000 as Weight)
			// Standard Error: 150_000
			.saturating_add((77_035_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_address(r: u32, ) -> Weight {
		(234_935_000 as Weight)
			// Standard Error: 149_000
			.saturating_add((78_318_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas_left(r: u32, ) -> Weight {
		(236_022_000 as Weight)
			// Standard Error: 166_000
			.saturating_add((77_340_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_balance(r: u32, ) -> Weight {
		(239_923_000 as Weight)
			// Standard Error: 210_000
			.saturating_add((218_810_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_value_transferred(r: u32, ) -> Weight {
		(249_590_000 as Weight)
			// Standard Error: 155_000
			.saturating_add((76_159_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(252_758_000 as Weight)
			// Standard Error: 154_000
			.saturating_add((75_078_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_block_number(r: u32, ) -> Weight {
		(248_832_000 as Weight)
			// Standard Error: 121_000
			.saturating_add((75_295_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_now(r: u32, ) -> Weight {
		(241_873_000 as Weight)
			// Standard Error: 126_000
			.saturating_add((75_842_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(251_845_000 as Weight)
			// Standard Error: 202_000
			.saturating_add((183_369_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas(r: u32, ) -> Weight {
		(111_367_000 as Weight)
			// Standard Error: 72_000
			.saturating_add((36_626_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input(r: u32, ) -> Weight {
		(238_471_000 as Weight)
			// Standard Error: 136_000
			.saturating_add((70_635_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(325_601_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((11_933_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return(r: u32, ) -> Weight {
		(237_360_000 as Weight)
			// Standard Error: 75_000
			.saturating_add((1_257_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(225_160_000 as Weight)
			// Standard Error: 0
			.saturating_add((238_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn seal_terminate(r: u32, ) -> Weight {
		(228_394_000 as Weight)
			// Standard Error: 176_000
			.saturating_add((84_333_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	fn seal_random(r: u32, ) -> Weight {
		(232_137_000 as Weight)
			// Standard Error: 337_000
			.saturating_add((251_979_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_deposit_event(r: u32, ) -> Weight {
		(225_312_000 as Weight)
			// Standard Error: 383_000
			.saturating_add((415_282_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:100 w:100)
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(732_390_000 as Weight)
			// Standard Error: 2_131_000
			.saturating_add((393_155_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 420_000
			.saturating_add((87_544_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_debug_message(r: u32, ) -> Weight {
		(131_112_000 as Weight)
			// Standard Error: 118_000
			.saturating_add((54_039_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage(r: u32, ) -> Weight {
		(227_158_000 as Weight)
			// Standard Error: 487_000
			.saturating_add((314_391_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		(466_881_000 as Weight)
			// Standard Error: 209_000
			.saturating_add((33_316_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		(447_488_000 as Weight)
			// Standard Error: 104_000
			.saturating_add((689_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_073_000
			.saturating_add((849_656_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		(413_618_000 as Weight)
			// Standard Error: 72_000
			.saturating_add((22_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage(r: u32, ) -> Weight {
		(111_513_000 as Weight)
			// Standard Error: 713_000
			.saturating_add((442_186_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(432_183_000 as Weight)
			// Standard Error: 189_000
			.saturating_add((61_454_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_contains_storage(r: u32, ) -> Weight {
		(16_103_000 as Weight)
			// Standard Error: 1_158_000
			.saturating_add((562_526_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		(426_065_000 as Weight)
			// Standard Error: 165_000
			.saturating_add((6_938_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_take_storage(r: u32, ) -> Weight {
		(73_577_000 as Weight)
			// Standard Error: 1_136_000
			.saturating_add((547_500_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:2 w:2)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0xdb4faa73ca6d2016e53c7156087c176b79b169c409b8a0063a07964f3187f9e9] (r:1 w:1)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)
	// Storage: unknown [0x300b870593d648c3f68bddefcb7e0e0996410b59ea34ad6536dabea30d3302d9] (r:1 w:1)
	// Storage: unknown [0x34448aa771744a9d8df59ce01f269ce76c1bf5538d32af59b3e4a40f914f10c3] (r:1 w:1)
	// Storage: unknown [0xbdbb7ed7ab7733c9126f47eca871d86fe0729c2c513fbaf494bfaf14f65ab4c5] (r:1 w:1)
	// Storage: unknown [0x49bbb0d7100a9e7953816e330b16f326e0e22d4f5db1f5212f80b64ee672687e] (r:1 w:1)
	// Storage: unknown [0x0e6ac5fd7ebc7ab3002431fc03ba1362a7f25af45ea5f521d6f2a10ea8d778a9] (r:1 w:1)
	// Storage: unknown [0x7665ef7bd55845ebd0573e9bb47b2798623f7dd0845ebfa4b301f9a9aa22a133] (r:1 w:1)
	// Storage: unknown [0x688efe13bfa56404151aa99227768a2089e83d63ce500b50e6fdd239bbdf4381] (r:1 w:1)
	// Storage: unknown [0x5f01fc25f7fcec2685b90b02981f055ba04d24e913ae415de21ec9e1e9ac807c] (r:1 w:1)
	// Storage: unknown [0x2e1d76267c7b11ad808e33698525af406150e8ecadcc2bd2ce520ce0af356237] (r:1 w:1)
	// Storage: unknown [0x7ac4b8663df15e82c2ffc187b8dd8f19b10789e7fe80be09f4bb20d6bb3284ad] (r:1 w:1)
	// Storage: unknown [0x924a03d10da36bfa1fff32c7b722da5e962a621d3c4605293288071d662537bd] (r:1 w:1)
	// Storage: unknown [0x2674aadc494a78bc50bd8c05b5234e619b736fcc6c3a262e2cbff75b8a2d40c7] (r:1 w:1)
	// Storage: unknown [0x324e32d43110f4cd6ea6b8eddfb7e94bf7dc4f2761153648680882b0695cc76e] (r:1 w:1)
	// Storage: unknown [0x00f57f5a712bbe33758149c0061587c7b43f1f7af9a1671c5e9887d62370e6ed] (r:1 w:1)
	// Storage: unknown [0x5f7c5c6b289f2a84089848cbc41922f2a49064d923a28ff3468805fec2715d2b] (r:1 w:1)
	// Storage: unknown [0x081fce6f0551c71176ba010a96848182164c4396f957d195832b4bf53550424b] (r:1 w:1)
	// Storage: unknown [0x04a896f5f254f7ccdc0d072d0e98543a360126b313c97fbfbd4be1bc7175b2d1] (r:1 w:1)
	// Storage: unknown [0x96e64e5a9efd54ffe2b4a7360d89fe68f79ede431caf9dd3fda93a7382f69411] (r:1 w:1)
	// Storage: unknown [0x9683ec6119f1d4426cd96c198dc09ac25db6280a650113359712b399f1c68c72] (r:1 w:1)
	// Storage: unknown [0xf2f272ae2de3768aa6bc0623bbeff07036a7f451bf6bfd3c09e7bcf635b3c605] (r:1 w:1)
	// Storage: unknown [0x6e08484d41fcfac1cadbd34e12bb6b6744a3b320e3f68995e4c96026c31979c3] (r:1 w:1)
	// Storage: unknown [0x8544458fbf0d98d4d978e1bba1f36940964456e8c68771c59f2368594336232c] (r:1 w:1)
	// Storage: unknown [0x53fcec34f1ec161d869efac88788e03ccd6caf9f5eb6e8d200c294d2f45e8a82] (r:1 w:1)
	// Storage: unknown [0x1ae3e86f988bca6d002498ebd21eedd221c7eced24f229e66b2fb032d0f5f60c] (r:1 w:1)
	// Storage: unknown [0x6bbaf5ad2d53b47aff17524831e6a06f71bf50bed3991b28dc131427a5dfa318] (r:1 w:1)
	// Storage: unknown [0x2f2df4eba27b6d633b7d687619dddfe120fcc2e0edf2c5f061580b69ae4a1f7c] (r:1 w:1)
	// Storage: unknown [0x8de3bbe89ccb994a1148675d0696adc7cc95edd8207a3bd74427848049492306] (r:1 w:1)
	// Storage: unknown [0x52c6d7684a22c2113af5ff8079715638d90e2d820b53fe1e2ea7e0615e412fd9] (r:1 w:1)
	// Storage: unknown [0xe00e2c42185ba6bc4069903bb0129ac2554dfb5ee7976a5c8465d7a408df68c7] (r:1 w:1)
	// Storage: unknown [0x3786bcae52db85f5d919de85702143e1beac605e3827e28fedb8c438ae9ef088] (r:1 w:1)
	// Storage: unknown [0x31361b97078906a9824198f57859f189e3a0a8eeb07aa8f5ef89483c96ef78bf] (r:1 w:1)
	// Storage: unknown [0x29ea6b215529a53b2fd9da0a185f6ea69798261d313e8a22ac41bf2814c9a9c1] (r:1 w:1)
	// Storage: unknown [0x94e4350fc396fda2da7c61f8d966f76d4901127be5dc92125b30885d6a5a0080] (r:1 w:1)
	// Storage: unknown [0x5200d0f2826db09c18bca7a1ae79f98305a0186489297a8151f93dfd9662f1c5] (r:1 w:1)
	// Storage: unknown [0xf56858066f6f879773decc1528f0cf683ba73e170798b66c84c4fd4ae4d6179a] (r:1 w:1)
	// Storage: unknown [0x8ac914147b43b52991108548a0ccf5be82293673a042de993c4f400f614a6681] (r:1 w:1)
	// Storage: unknown [0x29bc93f266a0d127f69f362b318cddf429ed5bc193910260a16abf8cc4588d19] (r:1 w:1)
	// Storage: unknown [0xb00fa5da7e79bd4db11fbaf1ecc3232564547561bbc0039e033ac0279313b5ee] (r:1 w:1)
	// Storage: unknown [0xf03af9507c19327fa33f6a7d6e1cf311aee61ee6eb8ef879b0962f84ef70b988] (r:1 w:1)
	// Storage: unknown [0x429af6a4740fd1dc2d70d9e9ca76451ef8d0dcb7adb1a9f4304889cd6abaa059] (r:1 w:1)
	// Storage: unknown [0x485044932a0ab1cb972557636f7958dfdd48634d0ba4407daf550a3a6193a3bd] (r:1 w:1)
	// Storage: unknown [0x9095c47b46220a241e177d24634b82d4bb29a04c84077ec7a6ff0585970d1646] (r:1 w:1)
	// Storage: unknown [0xf2e894f97b143d4b73924801bb0cee1a0c9d88220c8532d11707e6ab47d56ca1] (r:1 w:1)
	// Storage: unknown [0xac531dd0d6263955e7758687e577b529bbdb3928036db7f1d807a968e0bdb890] (r:1 w:1)
	// Storage: unknown [0xd007ecf3b50633e7006677b7d257d73233a18e183a508d76f08f7d0d339f5c20] (r:1 w:1)
	// Storage: unknown [0xb57e716d281abae69c9f0c842275efa6426ba580cc16e96cf070c0aed43ee7af] (r:1 w:1)
	// Storage: unknown [0x18bb56716e8f98b2408a8ec671c98db0719f9d6a4e9e3bd8d98c3b518eb56f2c] (r:1 w:1)
	// Storage: unknown [0x7c850c70ab15094d612baa07e52f234529e4bbe4c95f89b79e2cd97c61a57766] (r:1 w:1)
	// Storage: unknown [0xbf9d7213d2803a85215f199b461cdf563b03e695d14e79ec8c21d33cf8e0a1c9] (r:1 w:1)
	// Storage: unknown [0xb9d9742d6f604c2f3c12d59952b9a32760128a7d57538bd67d20dbf97000619f] (r:1 w:1)
	// Storage: unknown [0x813277348f73e1562929096c455ffa22b1f288cc819efcc233a71e9d78e7df23] (r:1 w:1)
	// Storage: unknown [0x41cb52f4c7489e8ba45f2adeb6abe24764cf08fb88f20555c39a8cc763d12901] (r:1 w:1)
	// Storage: unknown [0xcf748b921c6fd68e51c4aad2d0a6617e9682f6240db50ce42e83d83c3fbece2f] (r:1 w:1)
	// Storage: unknown [0x2d39817994b5ba2676388720e3eee9f4fc757d6c48be70d14de675f9b4a64a2e] (r:1 w:1)
	// Storage: unknown [0x88664c0f264861d397901f5b0709c2b1de847826c904cec127d01aa91bcd4ad6] (r:1 w:1)
	// Storage: unknown [0xa26645c0f39f84e060af5a73b2c2ecde8867e2d7296fab26805f0a1cc576cf24] (r:1 w:1)
	// Storage: unknown [0x308de36c7f1a52bc34ba2b96ec610128dd42bc9ac581eae7ed4383e45a83f609] (r:1 w:1)
	// Storage: unknown [0xfef4a110eee4a5401a0882608a7cfc22a7b1f542b4e3a74e6ac560b0c3879794] (r:1 w:1)
	// Storage: unknown [0xe9308ad1923d86ee67dd89db7b2c24f396ab294ef1316e9e6d5eaccd93733a1d] (r:1 w:1)
	// Storage: unknown [0xff44c7f082283584d410beffe249fefb4d7419cc58211dd734f7f72ebb2a618f] (r:1 w:1)
	// Storage: unknown [0x12299425a4b4ea5136a7267d232e1cc103543854ba2934b303b00fd8ebe501f3] (r:1 w:1)
	// Storage: unknown [0x82904240c70fd08c8d6e53627856e16dfeb8c9729a2238d173b31a56cb7086de] (r:1 w:1)
	// Storage: unknown [0x84fa080c541d588e755817ea338d09597dd0446da3aa78dfb7fc5186a7228018] (r:1 w:1)
	// Storage: unknown [0x8d83f96118f58219ee3a688f4199427ef28c1a6d0c6052e4f950a8953e201261] (r:1 w:1)
	// Storage: unknown [0xa33fe57cd06a89a60c717930bc503cf0f38b60804c52e5f30feedd2164a50688] (r:1 w:1)
	// Storage: unknown [0x4b63aa3c30973d237c4e3c71f90315e746b4b08935f518e55028ee586941064f] (r:1 w:1)
	// Storage: unknown [0xf72fbf6fcd0fd4a64ee867024bdce627360cd2194d77ff3b18f63434a06facc8] (r:1 w:1)
	// Storage: unknown [0x159a2152e521a0c7cfec07b80b287fe544775dbccb9703afce49fd3f058d423d] (r:1 w:1)
	// Storage: unknown [0xa1865f445d388131ed5ef96a1ab9188dc58c97a6c215a2f1d76ddff56ac72b3a] (r:1 w:1)
	// Storage: unknown [0x054a96d79d52dd3a148e4a42eda6c6b70a1c6166e2706bd11326b6faa2ab9281] (r:1 w:1)
	// Storage: unknown [0x3872c92d6665a29070e8418fcb1637610eb0fc11f4908d15735fe3865a10d6ed] (r:1 w:1)
	// Storage: unknown [0xbbf38866c42299a48266f9db33e99f49847cfd547277215c50e9994929614e0f] (r:1 w:1)
	// Storage: unknown [0x36b08faf5b20e9a80a201f0a07a420ff5c8d6f4ec8d294660a51e10b5d8ba958] (r:1 w:1)
	// Storage: unknown [0xa7c6cfe79b12567c176427c41db777435d657542701748104eccaed56d3ae273] (r:1 w:1)
	// Storage: unknown [0xc5d6e327873df268604d901d3cb4a603d00f7223002fa00662e55a358e84153b] (r:1 w:1)
	// Storage: unknown [0xbae6d6b8797c0faa90b462c506e90f4231f224f326736aae9449a013f2a2e64e] (r:1 w:1)
	// Storage: unknown [0x997bc71109b7a400ed9320c60a4b60b3409e7dd6971cc30dd67b0958aef91d6f] (r:1 w:1)
	// Storage: unknown [0x7db97ca38047dcb187fc0c08fb983109661baab8553dd2ac829b61e9db40bc2f] (r:1 w:1)
	// Storage: unknown [0xb9c51e2da72b6527b3ab704295e3bae31060ecc1e043594f8453d8b2ab5769e7] (r:1 w:1)
	// Storage: unknown [0x9deae3e294bdd6fdb746d5871b6ad5d7aef644b67b2af3323073e39218282e28] (r:1 w:1)
	// Storage: unknown [0x704bb8f08427ee9b0103c3816c07e75819700353157d2a537eeab53470389ca0] (r:1 w:1)
	// Storage: unknown [0xac6b94570bb5f162408bff16ec42f2040718c1092d0bc7ee2b1919f03bdb5075] (r:1 w:1)
	// Storage: unknown [0x2d681d55cfea87bec95fdde692d9d928d83493ec3f7f794988bd9ebdc95835c5] (r:1 w:1)
	// Storage: unknown [0x2016f6f5ad9d98dfc8826483f3c04a371ed2c6a9117880843b97431eb000f141] (r:1 w:1)
	// Storage: unknown [0xbae2a2155b8708687c4a563c8c039398f1d356ab438c2a19551e330d7d19b33e] (r:1 w:1)
	// Storage: unknown [0xd688ca0f4263c94fd4999e79e0ef7d5b8db856d957d8c1b34474bb86813afb54] (r:1 w:1)
	// Storage: unknown [0x6c26cb69e5ad5dac616294826732c63ad7af69b5ebf4eccaef9d2d4edd3925f5] (r:1 w:1)
	// Storage: unknown [0xf81dc1d5c78deaf76b072b3f3253e33987fc72fea10a6fe26b03ec7d1e3d57b0] (r:1 w:1)
	// Storage: unknown [0x676d35e85e780d847762725e22253f247075d1c1d558a4decf56c0491f3d7fed] (r:1 w:1)
	// Storage: unknown [0xc86c744d2335cc09d2b319eca17759669b13c17c704e570f105b64dc2b74f359] (r:1 w:1)
	// Storage: unknown [0xb8342c8a0491f1e43510eb3abb2bee181f4495d8d0213db953ab66217d3df0b4] (r:1 w:1)
	// Storage: unknown [0xae7b6a5865924be3eeee3ac56cd21ebf7f322acc326219cfff5fd8728a1d1b3f] (r:1 w:1)
	// Storage: unknown [0x163f75e1de3ec50a2cc5b855c35328869b0836ddb527cd8948e4f22cc57d09af] (r:1 w:1)
	// Storage: unknown [0x1d4229d967b961f1537d609d7ab8cd5c0dd70ad2265e4d8b87bdec67000952e1] (r:1 w:1)
	// Storage: unknown [0x10bd74f440ad26ac63db3f3dd950e1e9448ebb46beabcf83d1716e0d043fcbd5] (r:1 w:1)
	// Storage: unknown [0x1d6c81f919d34b8353086d4984268e69d6a83a89e688da4f5c03c215bfd7ab84] (r:1 w:1)
	// Storage: unknown [0x45671844ebdf874a5dc019323699096192d0874cbf10981cae2f92be488dcd49] (r:1 w:1)
	// Storage: unknown [0xeee1a1f7d4776f405be2c8f022fd9c9cd0bc43e8a5da1070dac55304bdded602] (r:1 w:1)
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		(814_160_000 as Weight)
			// Standard Error: 445_000
			.saturating_add((70_253_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(105 as Weight))
			.saturating_add(RocksDbWeight::get().writes(103 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_transfer(r: u32, ) -> Weight {
		(70_945_000 as Weight)
			// Standard Error: 1_408_000
			.saturating_add((2_526_884_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call(r: u32, ) -> Weight {
		(2_561_395_000 as Weight)
			// Standard Error: 19_784_000
			.saturating_add((20_645_690_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight {
		(22_589_583_000 as Weight)
			// Standard Error: 31_647_000
			.saturating_add((2_447_607_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 11_000
			.saturating_add((23_305_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 12_000
			.saturating_add((34_843_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(105 as Weight))
			.saturating_add(RocksDbWeight::get().reads((101 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(101 as Weight))
			.saturating_add(RocksDbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:100 w:100)
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 52_511_000
			.saturating_add((32_163_951_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((400 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((400 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:102 w:102)
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight {
		(27_744_656_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((23_653_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 31_000
			.saturating_add((36_054_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 31_000
			.saturating_add((160_592_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(208 as Weight))
			.saturating_add(RocksDbWeight::get().writes(206 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(234_903_000 as Weight)
			// Standard Error: 170_000
			.saturating_add((99_706_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(359_822_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((458_584_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(231_873_000 as Weight)
			// Standard Error: 166_000
			.saturating_add((114_790_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(299_790_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((324_193_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(234_737_000 as Weight)
			// Standard Error: 136_000
			.saturating_add((83_887_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(413_284_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((124_110_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(231_453_000 as Weight)
			// Standard Error: 147_000
			.saturating_add((83_192_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(400_659_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((124_126_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		(234_717_000 as Weight)
			// Standard Error: 1_185_000
			.saturating_add((15_527_339_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(46_946_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((804_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(54_009_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((2_496_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(53_895_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((2_519_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(37_959_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_968_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(36_319_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((3_139_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(39_823_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((1_933_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(38_961_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_510_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(45_078_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((2_421_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(48_015_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((24_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(48_177_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((19_853_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(49_688_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((29_931_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(85_995_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_117_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(39_628_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_345_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(39_447_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_376_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(42_116_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((1_884_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(45_146_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((1_949_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(50_863_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_754_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(47_256_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((808_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(50_218_000 as Weight)
			// Standard Error: 1_449_000
			.saturating_add((226_188_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(44_134_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_491_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(43_855_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_499_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(44_015_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_492_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(44_007_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_495_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(41_289_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((1_924_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(41_509_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((1_921_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(44_016_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_492_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(37_241_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_478_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(37_064_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_484_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(37_298_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_479_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(37_072_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_481_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(36_955_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_484_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(37_087_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_479_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(36_859_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((2_507_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(37_102_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_476_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(37_175_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_476_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(37_219_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_475_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(37_141_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_479_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(37_098_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_476_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(36_930_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_492_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(36_699_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((3_154_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(36_957_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_809_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(36_843_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((3_132_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(36_683_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_853_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(36_994_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_497_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(36_998_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_488_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(36_901_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_493_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(37_263_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_476_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(37_149_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_480_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(37_019_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_493_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(37_006_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_488_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(36_929_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_496_000 as Weight).saturating_mul(r as Weight))
	}
}
